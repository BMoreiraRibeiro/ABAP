{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Almanaque ABAP","text":"<p>Bem-vindo ao Almanaque ABAP \u2014 um guia pr\u00e1tico, organizado por curva de aprendizagem, com exemplos, padr\u00f5es e exerc\u00edcios.</p> <p>Se est\u00e1 a come\u00e7ar, siga a ordem sugerida abaixo; se j\u00e1 conhece os fundamentos, navegue diretamente pelos temas avan\u00e7ados.</p> <p>Comece por: - \ud83e\udde9 Fundamentos \u2014 conceitos, tipos de dados, tabelas internas e estrutura do programa. (<code>fundamentos/index.md</code>) - \ud83d\udcbe SQL \u2014 SELECTs, joins, agrega\u00e7\u00f5es e otimiza\u00e7\u00f5es. (<code>sql/index.md</code>) - \ud83e\uddf1 Objetos (OO) \u2014 classes, interfaces e padr\u00f5es OO em ABAP. (<code>objetos/index.md</code>) - \ud83d\udcca ALV \u2014 todos os tipos de ALV (cl\u00e1ssico/OO/tree) e exemplos pr\u00e1ticos. (<code>alvs/index.md</code>) - \ud83d\udc1e Debug &amp; Testes \u2014 debugging, breakpoints e unit tests. (<code>debug/index.md</code>, <code>testes/index.md</code>) - \u2699\ufe0f Integra\u00e7\u00f5es &amp; Jobs \u2014 BAPIs, RFCs, jobs em background e integra\u00e7\u00e3o com sistemas externos. (<code>integracoes/index.md</code>, <code>jobs/index.md</code>) - \ud83e\udde0 Performance &amp; Seguran\u00e7a \u2014 tuning, for all entries e authority checks. (<code>performance/index.md</code>, <code>security/index.md</code>) - \ud83e\uddf0 Utilit\u00e1rios &amp; CDS/AMDP \u2014 snippets \u00fateis, datas e exemplos de CDS/AMDP. (<code>utilitarios/index.md</code>, <code>cds_amdp/index.md</code>)</p> <p>Use o menu \u00e0 esquerda para navegar ou siga o mapa de aprendizagem no topo das p\u00e1ginas (<code>.pages</code>).</p> <p>Boa aprendizagem \u2014 e se quiser, execute os exemplos no seu sistema SAP para experimentar na pr\u00e1tica.</p>"},{"location":"alvs/","title":"Tipos de ALV em ABAP","text":"<p>Esta sec\u00e7\u00e3o aborda os diferentes tipos de ALV (ABAP List Viewer) dispon\u00edveis em ABAP para apresenta\u00e7\u00e3o de dados.</p>"},{"location":"alvs/#o-que-e-alv","title":"\ud83d\udcca O que \u00e9 ALV?","text":"<p>ALV (ABAP List Viewer) \u00e9 uma ferramenta SAP para exibir dados de forma estruturada com funcionalidades autom\u00e1ticas como: - Ordena\u00e7\u00e3o - Filtros - Exporta\u00e7\u00e3o (Excel, PDF) - Totaliza\u00e7\u00f5es - Layout personaliz\u00e1vel</p>"},{"location":"alvs/#tipos-de-alv","title":"\ud83c\udfaf Tipos de ALV","text":""},{"location":"alvs/#1-alv-classico-function-modules","title":"1. ALV Cl\u00e1ssico (Function Modules)","text":"<ul> <li><code>REUSE_ALV_GRID_DISPLAY</code></li> <li><code>REUSE_ALV_LIST_DISPLAY</code></li> <li><code>REUSE_ALV_HIERSEQ_LIST_DISPLAY</code></li> </ul>"},{"location":"alvs/#2-alv-orientado-a-objetos","title":"2. ALV Orientado a Objetos","text":"<ul> <li><code>CL_SALV_TABLE</code> (simples e completo)</li> <li><code>CL_GUI_ALV_GRID</code> (com container)</li> </ul>"},{"location":"alvs/#3-alv-tree","title":"3. ALV Tree","text":"<ul> <li>Apresenta\u00e7\u00e3o hier\u00e1rquica de dados</li> </ul>"},{"location":"alvs/#4-alv-popup","title":"4. ALV Popup","text":"<ul> <li>Janelas modais com dados</li> </ul>"},{"location":"alvs/#5-alv-em-fullscreen","title":"5. ALV em Fullscreen","text":"<ul> <li>Ocupa\u00e7\u00e3o total do ecr\u00e3</li> </ul> <p>\u00cdndice de Exemplos: 1. ALV Cl\u00e1ssico Grid 2. ALV Cl\u00e1ssico List 3. ALV OO com CL_SALV_TABLE 4. ALV OO com CL_GUI_ALV_GRID 5. ALV Tree Hier\u00e1rquico 6. ALV Popup 7. ALV com Edi\u00e7\u00e3o 8. ALV com Eventos 9. ALV com Bot\u00f5es Customizados 10. ALV com Layout e Variantes</p>"},{"location":"alvs/#exemplos-rapidos-in-page","title":"\ud83e\udde9 Exemplos r\u00e1pidos (in-page)","text":"<p>Aqui est\u00e3o trechos de exemplo r\u00e1pidos para cada tipo de ALV. Mantive a estrutura com p\u00e1ginas separadas \u2014 clique em \"Ler mais\" para ver a explica\u00e7\u00e3o completa e exemplos maiores.</p>"},{"location":"alvs/#alv-classico-grid-trecho","title":"ALV Cl\u00e1ssico - Grid (trecho)","text":"<pre><code>REPORT z_alv_grid_classico.\n\nDATA: lt_sflight TYPE TABLE OF sflight,\n            lt_fieldcat TYPE slis_t_fieldcat_alv.\n\nSTART-OF-SELECTION.\n    SELECT * FROM sflight INTO TABLE lt_sflight UP TO 100 ROWS.\n    CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'\n        EXPORTING i_structure_name = 'SFLIGHT'\n        CHANGING  ct_fieldcat      = lt_fieldcat.\n    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'\n        EXPORTING it_fieldcat = lt_fieldcat\n        TABLES   t_outtab    = lt_sflight.\n</code></pre> <p>Ler mais \u00bb</p>"},{"location":"alvs/#alv-classico-list-trecho","title":"ALV Cl\u00e1ssico - List (trecho)","text":"<pre><code>REPORT z_alv_list_classico.\nDATA: lt_scarr TYPE TABLE OF scarr, lt_fieldcat TYPE slis_t_fieldcat_alv.\nSTART-OF-SELECTION.\n    SELECT * FROM scarr INTO TABLE lt_scarr.\n    CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE' EXPORTING i_structure_name = 'SCARR' CHANGING ct_fieldcat = lt_fieldcat.\n    CALL FUNCTION 'REUSE_ALV_LIST_DISPLAY' EXPORTING it_fieldcat = lt_fieldcat TABLES t_outtab = lt_scarr.\n</code></pre> <p>Ler mais \u00bb</p>"},{"location":"alvs/#alv-oo-cl_salv_table-trecho","title":"ALV OO - CL_SALV_TABLE (trecho)","text":"<pre><code>DATA: lt_sflight TYPE TABLE OF sflight, lo_alv TYPE REF TO cl_salv_table.\nSTART-OF-SELECTION.\n    SELECT * FROM sflight INTO TABLE lt_sflight UP TO 100 ROWS.\n    TRY.\n            cl_salv_table=&gt;factory( IMPORTING r_salv_table = lo_alv CHANGING t_table = lt_sflight ).\n            lo_alv-&gt;display( ).\n    CATCH cx_salv_msg INTO DATA(lx_error).\n            MESSAGE lx_error-&gt;get_text( ) TYPE 'E'.\n    ENDTRY.\n</code></pre> <p>Ler mais \u00bb</p>"},{"location":"alvs/#alv-oo-cl_gui_alv_grid-trecho","title":"ALV OO - CL_GUI_ALV_GRID (trecho)","text":"<pre><code>DATA: lo_container TYPE REF TO cl_gui_custom_container, lo_alv TYPE REF TO cl_gui_alv_grid, lt_sflight TYPE TABLE OF sflight.\nCREATE OBJECT lo_container EXPORTING container_name = 'CONTAINER'.\nCREATE OBJECT lo_alv EXPORTING i_parent = lo_container.\nCALL METHOD lo_alv-&gt;set_table_for_first_display CHANGING it_outtab = lt_sflight.\n</code></pre> <p>Ler mais \u00bb</p>"},{"location":"alvs/#alv-tree-exemplo-dinamico-trecho","title":"ALV Tree - Exemplo din\u00e2mico (trecho)","text":"<p>O exemplo din\u00e2mico <code>Z_DYNAMIC_SALV_TREE</code> constr\u00f3i recursivamente uma \u00e1rvore a partir de qualquer estrutura (campos simples, estruturas internas e tabelas internas). Veja o exemplo completo na p\u00e1gina.</p> <p>Ler mais \u00bb</p> <p>Se quiser que algum destes trechos seja expandido (ex.: mostrar todo o exemplo do <code>Z_DYNAMIC_SALV_TREE</code> inline), digo e eu acrescento \u2014 por agora mantive trechos curtos na p\u00e1gina principal e deixei os exemplos completos nas p\u00e1ginas individuais.</p>"},{"location":"alvs/alv_botoes_custom/","title":"ALV com Bot\u00f5es Customizados","text":"<p>Adicionar bot\u00f5es pr\u00f3prios na toolbar do ALV.</p>"},{"location":"alvs/alv_botoes_custom/#com-cl_salv_table","title":"\ud83d\udd39 Com CL_SALV_TABLE","text":"<pre><code>DATA: lo_functions TYPE REF TO cl_salv_functions_list.\n\nlo_functions = lo_alv-&gt;get_functions( ).\nlo_functions-&gt;set_all( abap_true ).\n\n\" Adicionar bot\u00e3o customizado\nlo_functions-&gt;add_function(\n  name     = 'BTN_EXPORT'\n  icon     = '@49@'  \" \u00cdcone de exportar\n  text     = 'Exportar Sele\u00e7\u00e3o'\n  tooltip  = 'Exportar linhas selecionadas'\n  position = if_salv_c_function_position=&gt;right_of_salv_functions ).\n\n\" Capturar evento\nDATA: lo_events TYPE REF TO cl_salv_events_table.\nlo_events = lo_alv-&gt;get_event( ).\nSET HANDLER handle_user_command FOR lo_events.\n\nCLASS lcl_handler DEFINITION.\n  PUBLIC SECTION.\n    METHODS handle_user_command\n      FOR EVENT added_function OF cl_salv_events\n      IMPORTING e_salv_function.\nENDCLASS.\n\nCLASS lcl_handler IMPLEMENTATION.\n  METHOD handle_user_command.\n    CASE e_salv_function.\n      WHEN 'BTN_EXPORT'.\n        MESSAGE 'Bot\u00e3o Export clicado!' TYPE 'I'.\n    ENDCASE.\n  ENDMETHOD.\nENDCLASS.\n</code></pre>"},{"location":"alvs/alv_classico_grid/","title":"ALV Cl\u00e1ssico - Grid Display","text":"<p>O ALV Grid cl\u00e1ssico usa o function module <code>REUSE_ALV_GRID_DISPLAY</code>.</p>"},{"location":"alvs/alv_classico_grid/#exemplo-basico","title":"\ud83d\udd39 Exemplo B\u00e1sico","text":"<pre><code>REPORT z_alv_grid_classico.\n\nDATA: lt_sflight TYPE TABLE OF sflight,\n      lt_fieldcat TYPE slis_t_fieldcat_alv.\n\nSTART-OF-SELECTION.\n  \" Buscar dados\n  SELECT * FROM sflight INTO TABLE lt_sflight UP TO 100 ROWS.\n\n  \" Montar cat\u00e1logo de campos (autom\u00e1tico via estrutura)\n  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'\n    EXPORTING\n      i_structure_name = 'SFLIGHT'\n    CHANGING\n      ct_fieldcat      = lt_fieldcat.\n\n  \" Exibir ALV\n  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'\n    EXPORTING\n      it_fieldcat = lt_fieldcat\n    TABLES\n      t_outtab    = lt_sflight.\n</code></pre>"},{"location":"alvs/alv_classico_grid/#com-layout-customizado","title":"\ud83d\udd39 Com Layout Customizado","text":"<pre><code>DATA: ls_layout TYPE slis_layout_alv.\n\n\" Configurar layout\nls_layout-zebra = 'X'.              \" Linhas zebradas\nls_layout-colwidth_optimize = 'X'.  \" Otimizar largura das colunas\nls_layout-box_fieldname = 'SEL'.    \" Checkbox de sele\u00e7\u00e3o\n\nCALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'\n  EXPORTING\n    is_layout   = ls_layout\n    it_fieldcat = lt_fieldcat\n  TABLES\n    t_outtab    = lt_sflight.\n</code></pre>"},{"location":"alvs/alv_classico_grid/#parametros-uteis","title":"\ud83d\udca1 Par\u00e2metros \u00dateis","text":"<ul> <li><code>i_callback_program</code> \u2192 Nome do programa para eventos</li> <li><code>i_callback_user_command</code> \u2192 Rotina para comandos do utilizador</li> <li><code>i_callback_pf_status_set</code> \u2192 GUI Status customizado</li> </ul>"},{"location":"alvs/alv_classico_list/","title":"ALV Cl\u00e1ssico - List Display","text":"<p>Apresenta\u00e7\u00e3o em formato lista (menos funcionalidades que Grid).</p>"},{"location":"alvs/alv_classico_list/#exemplo","title":"\ud83d\udd39 Exemplo","text":"<pre><code>REPORT z_alv_list_classico.\n\nDATA: lt_scarr TYPE TABLE OF scarr,\n      lt_fieldcat TYPE slis_t_fieldcat_alv.\n\nSTART-OF-SELECTION.\n  SELECT * FROM scarr INTO TABLE lt_scarr.\n\n  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'\n    EXPORTING\n      i_structure_name = 'SCARR'\n    CHANGING\n      ct_fieldcat      = lt_fieldcat.\n\n  CALL FUNCTION 'REUSE_ALV_LIST_DISPLAY'\n    EXPORTING\n      it_fieldcat = lt_fieldcat\n    TABLES\n      t_outtab    = lt_scarr.\n</code></pre> <p>\ud83d\udca1 Menos usado que Grid, mas \u00fatil para reports simples.</p>"},{"location":"alvs/alv_editavel/","title":"ALV Edit\u00e1vel","text":"<p>Permitir edi\u00e7\u00e3o direta de dados no ALV.</p>"},{"location":"alvs/alv_editavel/#com-cl_gui_alv_grid","title":"\ud83d\udd39 Com CL_GUI_ALV_GRID","text":"<pre><code>DATA: lt_sflight TYPE TABLE OF sflight,\n      lo_alv     TYPE REF TO cl_gui_alv_grid,\n      lt_fieldcat TYPE lvc_t_fcat,\n      ls_layout  TYPE lvc_s_layo.\n\n\" ... criar container e dados ...\n\n\" Marcar campo como edit\u00e1vel no fieldcat\nLOOP AT lt_fieldcat ASSIGNING FIELD-SYMBOL(&lt;fs_fcat&gt;).\n  CASE &lt;fs_fcat&gt;-fieldname.\n    WHEN 'PRICE' OR 'CURRENCY'.\n      &lt;fs_fcat&gt;-edit = 'X'.  \" Permitir edi\u00e7\u00e3o\n  ENDCASE.\nENDLOOP.\n\n\" Layout para edi\u00e7\u00e3o\nls_layout-edit = 'X'.\n\nCALL METHOD lo_alv-&gt;set_table_for_first_display\n  EXPORTING\n    is_layout       = ls_layout\n  CHANGING\n    it_outtab       = lt_sflight\n    it_fieldcatalog = lt_fieldcat.\n</code></pre>"},{"location":"alvs/alv_editavel/#validar-dados-editados","title":"\ud83d\udd39 Validar Dados Editados","text":"<pre><code>\" Evento DATA_CHANGED\nSET HANDLER handle_data_changed FOR lo_alv.\n\nCLASS lcl_event_handler DEFINITION.\n  PUBLIC SECTION.\n    METHODS handle_data_changed\n      FOR EVENT data_changed OF cl_gui_alv_grid\n      IMPORTING er_data_changed.\nENDCLASS.\n\nCLASS lcl_event_handler IMPLEMENTATION.\n  METHOD handle_data_changed.\n    \" er_data_changed cont\u00e9m as altera\u00e7\u00f5es\n    LOOP AT er_data_changed-&gt;mt_good_cells INTO DATA(ls_cell).\n      \" Validar valor\n      IF ls_cell-value &lt; 0.\n        MESSAGE 'Pre\u00e7o n\u00e3o pode ser negativo' TYPE 'E'.\n      ENDIF.\n    ENDLOOP.\n  ENDMETHOD.\nENDCLASS.\n</code></pre>"},{"location":"alvs/alv_eventos/","title":"ALV com Eventos","text":"<p>Capturar a\u00e7\u00f5es do utilizador (clique duplo, bot\u00f5es, hotspots).</p>"},{"location":"alvs/alv_eventos/#evento-hotspot-click-cl_salv_table","title":"\ud83d\udd39 Evento Hotspot Click (CL_SALV_TABLE)","text":"<pre><code>DATA: lo_events TYPE REF TO cl_salv_events_table.\n\nlo_events = lo_alv-&gt;get_event( ).\nSET HANDLER handle_link_click FOR lo_events.\n\n\" ... na classe event handler ...\nCLASS lcl_handler DEFINITION.\n  PUBLIC SECTION.\n    METHODS handle_link_click\n      FOR EVENT link_click OF cl_salv_events_table\n      IMPORTING row column.\nENDCLASS.\n\nCLASS lcl_handler IMPLEMENTATION.\n  METHOD handle_link_click.\n    READ TABLE lt_sflight INDEX row INTO DATA(ls_flight).\n    MESSAGE |Clicaste em: { ls_flight-carrid }| TYPE 'I'.\n  ENDMETHOD.\nENDCLASS.\n</code></pre>"},{"location":"alvs/alv_eventos/#evento-user-command-classico","title":"\ud83d\udd39 Evento User Command (Cl\u00e1ssico)","text":"<pre><code>FORM user_command USING r_ucomm TYPE sy-ucomm\n                        rs_selfield TYPE slis_selfield.\n  CASE r_ucomm.\n    WHEN '&amp;IC1'.  \" Duplo clique\n      READ TABLE lt_sflight INDEX rs_selfield-tabindex INTO DATA(ls_line).\n      MESSAGE |Duplo clique: { ls_line-connid }| TYPE 'I'.\n  ENDCASE.\nENDFORM.\n</code></pre>"},{"location":"alvs/alv_layout_variantes/","title":"ALV com Layout e Variantes","text":"<p>Permitir que utilizadores guardem layouts personalizados.</p>"},{"location":"alvs/alv_layout_variantes/#com-cl_salv_table","title":"\ud83d\udd39 Com CL_SALV_TABLE","text":"<pre><code>DATA: lo_layout TYPE REF TO cl_salv_layout,\n      ls_key    TYPE salv_s_layout_key.\n\n\" Definir chave para guardar variantes\nls_key-report = sy-repid.\n\nlo_layout = lo_alv-&gt;get_layout( ).\nlo_layout-&gt;set_key( ls_key ).\nlo_layout-&gt;set_save_restriction( if_salv_c_layout=&gt;restrict_none ).  \" Permitir guardar\n\nlo_alv-&gt;display( ).\n</code></pre>"},{"location":"alvs/alv_layout_variantes/#layout-classico","title":"\ud83d\udd39 Layout Cl\u00e1ssico","text":"<pre><code>DATA: ls_variant TYPE disvariant.\n\nls_variant-report = sy-repid.\nls_variant-username = sy-uname.\n\nCALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'\n  EXPORTING\n    i_save          = 'A'  \" Permitir guardar variantes\n    is_variant      = ls_variant\n    it_fieldcat     = lt_fieldcat\n  TABLES\n    t_outtab        = lt_data.\n</code></pre> <p>\ud83d\udca1 Variantes permitem que cada utilizador configure o seu pr\u00f3prio layout (ordem de colunas, filtros, etc.).</p>"},{"location":"alvs/alv_oo_gui_grid/","title":"ALV OO - CL_GUI_ALV_GRID","text":"<p>ALV com container para embedding em Dynpros ou integra\u00e7\u00e3o avan\u00e7ada.</p>"},{"location":"alvs/alv_oo_gui_grid/#exemplo-completo","title":"\ud83d\udd39 Exemplo Completo","text":"<pre><code>REPORT z_alv_gui_grid.\n\nDATA: lo_container TYPE REF TO cl_gui_custom_container,\n      lo_alv       TYPE REF TO cl_gui_alv_grid,\n      lt_sflight   TYPE TABLE OF sflight,\n      lt_fieldcat  TYPE lvc_t_fcat,\n      ls_layout    TYPE lvc_s_layo.\n\nSTART-OF-SELECTION.\n  SELECT * FROM sflight INTO TABLE lt_sflight UP TO 100 ROWS.\n\n  \" Montar fieldcat\n  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'\n    EXPORTING\n      i_structure_name = 'SFLIGHT'\n    CHANGING\n      ct_fieldcat      = lt_fieldcat.\n\n  \" Layout\n  ls_layout-zebra = 'X'.\n  ls_layout-cwidth_opt = 'X'.\n\n  \" Criar container (em Dynpro seria ligado a um controlo)\n  CREATE OBJECT lo_container\n    EXPORTING\n      container_name = 'CONTAINER'.\n\n  \" Criar ALV Grid\n  CREATE OBJECT lo_alv\n    EXPORTING\n      i_parent = lo_container.\n\n  \" Exibir dados\n  CALL METHOD lo_alv-&gt;set_table_for_first_display\n    EXPORTING\n      is_layout       = ls_layout\n    CHANGING\n      it_outtab       = lt_sflight\n      it_fieldcatalog = lt_fieldcat.\n\n  CALL SCREEN 100.\n</code></pre>"},{"location":"alvs/alv_oo_gui_grid/#screen-100-dynpro","title":"\ud83d\udd39 Screen 100 (Dynpro)","text":"<ul> <li>Criar screen 100 na SE51</li> <li>Adicionar Custom Container chamado <code>CONTAINER</code></li> <li>PBO:</li> </ul> <pre><code>PROCESS BEFORE OUTPUT.\n  MODULE status_0100.\n</code></pre> <p>\ud83d\udca1 Usado quando precisas de controlo total sobre o ALV e integra\u00e7\u00e3o com Dynpros.</p>"},{"location":"alvs/alv_oo_salv_table/","title":"ALV OO - CL_SALV_TABLE","text":"<p>Abordagem moderna e simplificada para ALVs usando orienta\u00e7\u00e3o a objetos.</p>"},{"location":"alvs/alv_oo_salv_table/#exemplo-basico","title":"\ud83d\udd39 Exemplo B\u00e1sico","text":"<pre><code>REPORT z_alv_oo_salv.\n\nDATA: lt_sflight TYPE TABLE OF sflight,\n      lo_alv TYPE REF TO cl_salv_table.\n\nSTART-OF-SELECTION.\n  SELECT * FROM sflight INTO TABLE lt_sflight UP TO 100 ROWS.\n\n  TRY.\n      \" Factory method cria inst\u00e2ncia do ALV\n      cl_salv_table=&gt;factory(\n        IMPORTING r_salv_table = lo_alv\n        CHANGING  t_table      = lt_sflight ).\n\n      \" Exibir\n      lo_alv-&gt;display( ).\n\n    CATCH cx_salv_msg INTO DATA(lx_error).\n      MESSAGE lx_error-&gt;get_text( ) TYPE 'E'.\n  ENDTRY.\n</code></pre>"},{"location":"alvs/alv_oo_salv_table/#com-funcionalidades-ativadas","title":"\ud83d\udd39 Com Funcionalidades Ativadas","text":"<pre><code>DATA: lo_functions TYPE REF TO cl_salv_functions_list,\n      lo_columns   TYPE REF TO cl_salv_columns_table,\n      lo_display   TYPE REF TO cl_salv_display_settings.\n\n\" Ativar todas as fun\u00e7\u00f5es padr\u00e3o (Excel, layout, filtros, etc.)\nlo_functions = lo_alv-&gt;get_functions( ).\nlo_functions-&gt;set_all( abap_true ).\n\n\" Otimizar colunas\nlo_columns = lo_alv-&gt;get_columns( ).\nlo_columns-&gt;set_optimize( abap_true ).\n\n\" Configurar t\u00edtulo\nlo_display = lo_alv-&gt;get_display_settings( ).\nlo_display-&gt;set_list_header( 'Lista de Voos' ).\nlo_display-&gt;set_striped_pattern( abap_true ).  \" Zebrado\n\nlo_alv-&gt;display( ).\n</code></pre>"},{"location":"alvs/alv_oo_salv_table/#alterar-propriedades-de-colunas","title":"\ud83d\udd39 Alterar Propriedades de Colunas","text":"<pre><code>DATA: lo_column TYPE REF TO cl_salv_column_table.\n\nTRY.\n    \" Obter coluna espec\u00edfica\n    lo_column ?= lo_columns-&gt;get_column( 'PRICE' ).\n\n    \" Configurar\n    lo_column-&gt;set_short_text( 'Pre\u00e7o' ).\n    lo_column-&gt;set_medium_text( 'Pre\u00e7o do Voo' ).\n    lo_column-&gt;set_long_text( 'Pre\u00e7o Total do Voo' ).\n\n  CATCH cx_salv_not_found.\n    \" Coluna n\u00e3o encontrada\nENDTRY.\n</code></pre>"},{"location":"alvs/alv_oo_salv_table/#vantagens-do-cl_salv_table","title":"\ud83d\udca1 Vantagens do CL_SALV_TABLE","text":"<ul> <li>C\u00f3digo mais limpo e OO</li> <li>Funcionalidades autom\u00e1ticas (Export, Sort, Filter)</li> <li>Melhor manutenibilidade</li> </ul>"},{"location":"alvs/alv_popup/","title":"ALV Popup","text":"<p>Exibir ALV numa janela modal (popup).</p>"},{"location":"alvs/alv_popup/#exemplo-com-cl_salv_table","title":"\ud83d\udd39 Exemplo com CL_SALV_TABLE","text":"<pre><code>REPORT z_alv_popup.\n\nDATA: lt_scarr TYPE TABLE OF scarr,\n      lo_alv   TYPE REF TO cl_salv_table.\n\nSTART-OF-SELECTION.\n  SELECT * FROM scarr INTO TABLE lt_scarr.\n\n  TRY.\n      cl_salv_table=&gt;factory(\n        EXPORTING\n          list_display = abap_false   \" N\u00e3o fullscreen\n        IMPORTING\n          r_salv_table = lo_alv\n        CHANGING\n          t_table      = lt_scarr ).\n\n      \" Configurar como popup\n      lo_alv-&gt;set_screen_popup(\n        start_column = 10\n        end_column   = 100\n        start_line   = 5\n        end_line     = 20 ).\n\n      lo_alv-&gt;display( ).\n\n    CATCH cx_salv_msg.\n  ENDTRY.\n</code></pre>"},{"location":"alvs/alv_popup/#popup-com-reuse_alv_popup_to_select","title":"\ud83d\udd39 Popup com REUSE_ALV_POPUP_TO_SELECT","text":"<pre><code>DATA: lt_return TYPE TABLE OF scarr.\n\nCALL FUNCTION 'REUSE_ALV_POPUP_TO_SELECT'\n  EXPORTING\n    i_title               = 'Selecionar Companhia'\n    i_tabname             = 'SCARR'\n    i_structure_name      = 'SCARR'\n  IMPORTING\n    es_selfield           = DATA(ls_selected)\n  TABLES\n    t_outtab              = lt_scarr\n  EXCEPTIONS\n    program_error         = 1\n    OTHERS                = 2.\n\nIF sy-subrc = 0.\n  WRITE: / 'Selecionado:', ls_selected-value.\nENDIF.\n</code></pre>"},{"location":"alvs/alv_tree/","title":"ALV Tree - Hier\u00e1rquico","text":""},{"location":"alvs/alv_tree/#alv-tree-hierarquico_1","title":"ALV Tree - Hier\u00e1rquico","text":"<p>Apresenta\u00e7\u00e3o de dados em estrutura de \u00e1rvore (hierarquia pai-filho).</p>"},{"location":"alvs/alv_tree/#exemplo-com-cl_salv_tree","title":"\ud83d\udd39 Exemplo com CL_SALV_TREE","text":"<pre><code>REPORT z_alv_tree.\n\nDATA: lo_tree TYPE REF TO cl_salv_tree,\n      lt_data TYPE TABLE OF sflight.\n\nSTART-OF-SELECTION.\n  SELECT * FROM sflight INTO TABLE lt_data.\n\n  TRY.\n      cl_salv_tree=&gt;factory(\n        IMPORTING r_salv_tree = lo_tree\n        CHANGING  t_table     = lt_data ).\n\n      lo_tree-&gt;display( ).\n\n    CATCH cx_salv_error INTO DATA(lx_err).\n      MESSAGE lx_err-&gt;get_text( ) TYPE 'E'.\n  ENDTRY.\n</code></pre> <p>\ud83d\udca1 Ideal para estruturas como organogramas, BOMs ou \u00e1rvores de pastas.</p>"},{"location":"alvs/alv_tree/#exemplo-dinamico-z_dynamic_salv_tree","title":"\ud83d\udd39 Exemplo Din\u00e2mico: Z_DYNAMIC_SALV_TREE","text":"<p>Exemplo completo de um report ABAP que monta dinamicamente um SALV Tree a partir de qualquer estrutura, processando campos simples, estruturas internas e tabelas internas. \u00datil como refer\u00eancia para criar \u00e1rvores din\u00e2micas que refletem a estrutura de dados.</p> <pre><code>*&amp;---------------------------------------------------------------------*\n*&amp; Report Z_DYNAMIC_SALV_TREE\n*&amp;---------------------------------------------------------------------*\n*&amp; SALV Tree Din\u00e2mica - Processa qualquer estrutura automaticamente\n*&amp;---------------------------------------------------------------------*\nREPORT z_dynamic_salv_tree.\n\n*----------------------------------------------------------------------*\n* Estrutura para a Tree\n*----------------------------------------------------------------------*\nTYPES: BEGIN OF ty_tree_node,\n         field_name   TYPE string,\n         field_value  TYPE string,\n         field_type   TYPE string,\n       END OF ty_tree_node.\n\n*----------------------------------------------------------------------*\n* Declara\u00e7\u00f5es Globais\n*----------------------------------------------------------------------*\nDATA: gt_tree_data TYPE STANDARD TABLE OF ty_tree_node.\n\nDATA: go_tree      TYPE REF TO cl_salv_tree,\n      go_nodes     TYPE REF TO cl_salv_nodes,\n      go_node      TYPE REF TO cl_salv_node,\n      go_columns   TYPE REF TO cl_salv_columns_tree,\n      go_functions TYPE REF TO cl_salv_functions_tree.\n\n*----------------------------------------------------------------------*\n* START-OF-SELECTION\n*----------------------------------------------------------------------*\nSTART-OF-SELECTION.\n\n  \" Obter dados\n  DATA lv_os TYPE aufnr VALUE '200000000355'.\n  DATA(lo_so) = NEW zcl_wm_so( lv_os ).\n  DATA(ls_os) = zcl_wm_putorder_fill_body=&gt;get_put_order_data( lo_so ).\n\n  \" Criar SALV Tree\n  TRY.\n      CALL METHOD cl_salv_tree=&gt;factory\n        IMPORTING\n          r_salv_tree = go_tree\n        CHANGING\n          t_table     = gt_tree_data.\n    CATCH cx_salv_error INTO DATA(lx_error).\n      MESSAGE lx_error-&gt;get_text( ) TYPE 'I' DISPLAY LIKE 'E'.\n      RETURN.\n  ENDTRY.\n\n  \" Obter n\u00f3s\n  go_nodes = go_tree-&gt;get_nodes( ).\n\n  \" Construir \u00e1rvore recursivamente\n  PERFORM build_tree USING ls_os '' 0.\n\n  \" Configurar colunas\n  PERFORM configure_columns.\n\n  \" Ativar fun\u00e7\u00f5es\n  go_functions = go_tree-&gt;get_functions( ).\n  go_functions-&gt;set_all( abap_true ).\n\n  \" Colapsar todos os n\u00f3s\n  TRY.\n      go_nodes-&gt;collapse_all( ).\n    CATCH cx_salv_msg.\n  ENDTRY.\n\n  \" Exibir\n  go_tree-&gt;display( ).\n\n*----------------------------------------------------------------------*\n* FORM build_tree - Construir \u00e1rvore recursivamente\n*----------------------------------------------------------------------*\nFORM build_tree USING p_data       TYPE any\n                      p_parent_key TYPE salv_de_node_key\n                      p_level      TYPE i.\n\n  DATA: wa_node        TYPE ty_tree_node,\n        lv_current_key TYPE salv_de_node_key.\n\n  DATA(lo_type) = cl_abap_typedescr=&gt;describe_by_data( p_data ).\n\n  IF lo_type-&gt;kind &lt;&gt; cl_abap_typedescr=&gt;kind_struct.\n    RETURN.\n  ENDIF.\n\n  DATA(lt_comp) = CAST cl_abap_structdescr( lo_type )-&gt;components.\n\n  LOOP AT lt_comp ASSIGNING FIELD-SYMBOL(&lt;fs_comp&gt;).\n\n    \" Ignorar campos especiais\n    IF &lt;fs_comp&gt;-name = 'CONTROLLER' OR &lt;fs_comp&gt;-name = 'MANDT'.\n      CONTINUE.\n    ENDIF.\n\n    \" Obter valor do campo\n    FIELD-SYMBOLS: &lt;fs_value&gt; TYPE any.\n    ASSIGN COMPONENT &lt;fs_comp&gt;-name OF STRUCTURE p_data TO &lt;fs_value&gt;.\n\n    IF sy-subrc &lt;&gt; 0.\n      CONTINUE.\n    ENDIF.\n\n    CLEAR wa_node.\n    wa_node-field_name = &lt;fs_comp&gt;-name.\n\n    CASE &lt;fs_comp&gt;-type_kind.\n\n      \" ========== CAMPO SIMPLES ==========\n      WHEN cl_abap_typedescr=&gt;typekind_string OR\n           cl_abap_typedescr=&gt;typekind_char   OR\n           cl_abap_typedescr=&gt;typekind_num    OR\n           cl_abap_typedescr=&gt;typekind_int    OR\n           cl_abap_typedescr=&gt;typekind_int1   OR\n           cl_abap_typedescr=&gt;typekind_int2   OR\n           cl_abap_typedescr=&gt;typekind_packed OR\n           cl_abap_typedescr=&gt;typekind_date   OR\n           cl_abap_typedescr=&gt;typekind_time.\n\n        wa_node-field_value = &lt;fs_value&gt;.\n        wa_node-field_type = 'Campo'.\n\n        TRY.\n            go_node = go_nodes-&gt;add_node(\n              related_node = p_parent_key\n              relationship = cl_gui_column_tree=&gt;relat_last_child\n              data_row     = wa_node ).\n          CATCH cx_salv_msg.\n        ENDTRY.\n\n      \" ========== ESTRUTURA ==========\n      WHEN cl_abap_typedescr=&gt;typekind_struct1 OR\n           cl_abap_typedescr=&gt;typekind_struct2.\n\n        wa_node-field_value = '(Estrutura)'.\n        wa_node-field_type = 'Estrutura'.\n\n        TRY.\n            go_node = go_nodes-&gt;add_node(\n              related_node = p_parent_key\n              relationship = cl_gui_column_tree=&gt;relat_last_child\n              data_row     = wa_node ).\n            lv_current_key = go_node-&gt;get_key( ).\n          CATCH cx_salv_msg.\n            CONTINUE.\n        ENDTRY.\n\n        \" Chamada recursiva\n        DATA(lv_next_level) = p_level + 1.\n        PERFORM build_tree USING &lt;fs_value&gt; lv_current_key lv_next_level.\n\n      \" ========== TABELA ==========\n      WHEN cl_abap_typedescr=&gt;typekind_table.\n\n        FIELD-SYMBOLS: &lt;ft_table&gt; TYPE ANY TABLE.\n        ASSIGN &lt;fs_value&gt; TO &lt;ft_table&gt;.\n\n        DATA(lv_lines) = lines( &lt;ft_table&gt; ).\n        wa_node-field_value = |Tabela ({ lv_lines } linhas)|.\n        wa_node-field_type = 'Tabela'.\n\n        TRY.\n            go_node = go_nodes-&gt;add_node(\n              related_node = p_parent_key\n              relationship = cl_gui_column_tree=&gt;relat_last_child\n              data_row     = wa_node ).\n            lv_current_key = go_node-&gt;get_key( ).\n          CATCH cx_salv_msg.\n            CONTINUE.\n        ENDTRY.\n\n        \" Processar linhas\n        FIELD-SYMBOLS: &lt;fs_row&gt; TYPE any.\n        DATA: lv_row_counter TYPE i VALUE 0,\n              lv_row_key     TYPE salv_de_node_key.\n\n        LOOP AT &lt;ft_table&gt; ASSIGNING &lt;fs_row&gt;.\n          lv_row_counter = lv_row_counter + 1.\n\n          \" Criar n\u00f3 para a linha (sem adicionar como n\u00f3 vis\u00edvel)\n          \" Processar diretamente os campos da linha\n          DATA(lv_table_level) = p_level + 1.\n          PERFORM build_tree USING &lt;fs_row&gt; lv_current_key lv_table_level.\n        ENDLOOP.\n\n    ENDCASE.\n\n  ENDLOOP.\n\nENDFORM.\n\n*----------------------------------------------------------------------*\n* FORM configure_columns - Configurar colunas\n*----------------------------------------------------------------------*\nFORM configure_columns.\n\n  DATA: lo_column TYPE REF TO cl_salv_column_tree.\n\n  go_columns = go_tree-&gt;get_columns( ).\n  go_columns-&gt;set_optimize( abap_false ).\n\n  \" Definir largura da coluna de hierarquia (\u00edcones)\n  TRY.\n      go_tree-&gt;get_tree_settings( )-&gt;set_hierarchy_size( 8 ).\n    CATCH cx_salv_error.\n  ENDTRY.\n\n  \" Coluna FIELD_NAME\n  TRY.\n      lo_column ?= go_columns-&gt;get_column( 'FIELD_NAME' ).\n      lo_column-&gt;set_long_text( 'Campo' ).\n      lo_column-&gt;set_medium_text( 'Campo' ).\n      lo_column-&gt;set_short_text( 'Campo' ).\n      lo_column-&gt;set_output_length( 40 ).\n    CATCH cx_salv_not_found.\n  ENDTRY.\n\n  \" Coluna FIELD_VALUE\n  TRY.\n      lo_column ?= go_columns-&gt;get_column( 'FIELD_VALUE' ).\n      lo_column-&gt;set_long_text( 'Valor' ).\n      lo_column-&gt;set_medium_text( 'Valor' ).\n      lo_column-&gt;set_short_text( 'Valor' ).\n      lo_column-&gt;set_output_length( 80 ).\n    CATCH cx_salv_not_found.\n  ENDTRY.\n\n  \" Coluna FIELD_TYPE\n  TRY.\n      lo_column ?= go_columns-&gt;get_column( 'FIELD_TYPE' ).\n      lo_column-&gt;set_long_text( 'Tipo' ).\n      lo_column-&gt;set_medium_text( 'Tipo' ).\n      lo_column-&gt;set_short_text( 'Tipo' ).\n      lo_column-&gt;set_output_length( 12 ).\n    CATCH cx_salv_not_found.\n  ENDTRY.\n\nENDFORM.\n</code></pre>"},{"location":"cds_amdp/","title":"CDS e AMDP","text":"<p>Esta sec\u00e7\u00e3o apresenta exemplos b\u00e1sicos de Core Data Services (CDS) e ABAP Managed Database Procedures (AMDP).</p> <p>Conte\u00fado dispon\u00edvel: - <code>cds_view.md</code> \u2014 Exemplo de CDS View - <code>ex01.md</code> \u2026 <code>ex10.md</code> \u2014 Exerc\u00edcios e exemplos pr\u00e1ticos</p> <p>Pr\u00f3ximo passo: experimente o <code>cds_view.md</code> e um dos exerc\u00edcios.</p>"},{"location":"cds_amdp/cds_view/","title":"CDS View","text":"<pre><code>@AbapCatalog.sqlViewName: 'ZV_FLIGHTS'\n@EndUserText.label: 'Voos e Companhias'\ndefine view ZCDS_Flights as\n  select from sflight\n  association [0..1] to scarr as _Carrier on $projection.carrid = _Carrier.carrid\n{\n  key sflight.carrid,\n  key sflight.connid,\n  sflight.price,\n  _Carrier.carrname\n}\n</code></pre>"},{"location":"cds_amdp/ex01/","title":"Cds_amdp Exemplo 01","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"cds_amdp/ex02/","title":"Cds_amdp Exemplo 02","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"cds_amdp/ex03/","title":"Cds_amdp Exemplo 03","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"cds_amdp/ex04/","title":"Cds_amdp Exemplo 04","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"cds_amdp/ex05/","title":"Cds_amdp Exemplo 05","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"cds_amdp/ex06/","title":"Cds_amdp Exemplo 06","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"cds_amdp/ex07/","title":"Cds_amdp Exemplo 07","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"cds_amdp/ex08/","title":"Cds_amdp Exemplo 08","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"cds_amdp/ex09/","title":"Cds_amdp Exemplo 09","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"cds_amdp/ex10/","title":"Cds_amdp Exemplo 10","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"debug/","title":"Debug e An\u00e1lise","text":"<p>Ferramentas e t\u00e9cnicas para depurar programas ABAP, usar breakpoints e analisar o comportamento em tempo de execu\u00e7\u00e3o.</p> <p>Conte\u00fados principais: - <code>breakpoint.md</code> \u2014 Usar breakpoints e an\u00e1lise passo-a-passo - <code>ex01.md</code> \u2026 <code>ex05.md</code> \u2014 Exemplos pr\u00e1ticos</p> <p>Pr\u00f3ximo passo: abra um programa simples e siga o tutorial de <code>breakpoint.md</code>.</p>"},{"location":"debug/breakpoint/","title":"Breakpoints","text":"<pre><code>BREAK-POINT.\nWRITE: / 'Execu\u00e7\u00e3o parada para an\u00e1lise.'.\n</code></pre>"},{"location":"debug/ex01/","title":"Debug Exemplo 01","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"debug/ex02/","title":"Debug Exemplo 02","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"debug/ex03/","title":"Debug Exemplo 03","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"debug/ex04/","title":"Debug Exemplo 04","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"debug/ex05/","title":"Debug Exemplo 05","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"fundamentos/","title":"Fundamentos ABAP","text":"<p>Esta sec\u00e7\u00e3o introduz os conceitos fundamentais da linguagem ABAP \u2014 a base de todo o desenvolvimento SAP.</p> <p>Conte\u00fado e ordem sugerida: - Tipos de Dados - Vari\u00e1veis e Constantes - Tabelas Internas - Field-Symbols e Refer\u00eancias - Estruturas e Includes - Ecr\u00e3s de Sele\u00e7\u00e3o - Tratamento de Exce\u00e7\u00f5es - Tipos Customizados</p> <p>Pr\u00f3ximo passo: come\u00e7ar por <code>tipos_de_dados.md</code> e depois seguir a ordem acima.</p>"},{"location":"fundamentos/estruturas/","title":"Estruturas em ABAP","text":"<p>As estruturas agrupam m\u00faltiplos campos de tipos diferentes sob um \u00fanico nome.</p>"},{"location":"fundamentos/estruturas/#exemplo","title":"\ud83d\udd39 Exemplo","text":"<pre><code>TYPES: BEGIN OF ty_aluno,\n         nome TYPE string,\n         idade TYPE i,\n         curso TYPE string,\n       END OF ty_aluno.\n\nDATA ls_aluno TYPE ty_aluno.\nls_aluno-nome = 'Cristiano'.\nls_aluno-idade = 21.\nls_aluno-curso = 'Engenharia'.\n\nWRITE: / ls_aluno-nome, ls_aluno-curso.\n</code></pre> <p>\ud83d\udca1 Estruturas s\u00e3o essenciais para tabelas internas (linhas s\u00e3o do tipo de estrutura).  </p>"},{"location":"fundamentos/excecoes_try_catch/","title":"Tratamento de Exce\u00e7\u00f5es (TRY / CATCH)","text":"<p>ABAP usa exce\u00e7\u00f5es para lidar com erros de execu\u00e7\u00e3o de forma estruturada.</p>"},{"location":"fundamentos/excecoes_try_catch/#exemplo","title":"\ud83d\udd39 Exemplo","text":"<pre><code>TRY.\n    DATA(lv_x) = 1 / 0. \" Gera exce\u00e7\u00e3o\n  CATCH cx_sy_zerodivide INTO DATA(lx_error).\n    WRITE: / lx_error-&gt;get_text( ).\nENDTRY.\n</code></pre>"},{"location":"fundamentos/excecoes_try_catch/#dica","title":"\ud83d\udca1 Dica","text":"<p>Usa classes CX_* para capturar tipos espec\u00edficos de erro.  </p>"},{"location":"fundamentos/field_symbols_refs/","title":"Field Symbols e Data References","text":"<p>Usados para apontar para endere\u00e7os de mem\u00f3ria dinamicamente (sem copiar dados).</p>"},{"location":"fundamentos/field_symbols_refs/#field-symbols","title":"\ud83d\udd39 Field-Symbols","text":"<pre><code>DATA lv_valor TYPE i VALUE 10.\nFIELD-SYMBOLS &lt;fs&gt; TYPE i.\nASSIGN lv_valor TO &lt;fs&gt;.\n\n&lt;fs&gt; = &lt;fs&gt; + 5.\nWRITE: / lv_valor. \" 15\n</code></pre>"},{"location":"fundamentos/field_symbols_refs/#data-references","title":"\ud83d\udd39 Data References","text":"<pre><code>DATA lr_valor TYPE REF TO i.\nCREATE DATA lr_valor.\nlr_valor-&gt;* = 100.\nWRITE: / lr_valor-&gt;*.\n</code></pre>"},{"location":"fundamentos/field_symbols_refs/#quando-usar","title":"\ud83d\udca1 Quando usar","text":"<ul> <li><code>FIELD-SYMBOLS</code> \u2192 apontar para vari\u00e1veis/tabelas existentes  </li> <li><code>REF TO</code> \u2192 criar refer\u00eancias novas em tempo de execu\u00e7\u00e3o  </li> </ul>"},{"location":"fundamentos/select_screen_basico/","title":"Ecr\u00e3 de Sele\u00e7\u00e3o (Selection Screen)","text":"<p>Permite criar uma interface simples de entrada de par\u00e2metros.</p>"},{"location":"fundamentos/select_screen_basico/#exemplo","title":"\ud83d\udd39 Exemplo","text":"<pre><code>REPORT z_demo_select.\n\nPARAMETERS p_carr TYPE s_carr_id DEFAULT 'LH'.\nSELECT-OPTIONS so_price FOR sflight-price.\n\nSELECT * FROM sflight\n  INTO TABLE @DATA(lt)\n  WHERE carrid = @p_carr AND price IN @so_price.\n\nWRITE: / lines( lt ), 'registos encontrados'.\n</code></pre>"},{"location":"fundamentos/tabelas_internas/","title":"Tabelas Internas","text":"<p>Tabelas internas s\u00e3o cole\u00e7\u00f5es de linhas em mem\u00f3ria \u2014 o equivalente ABAP a arrays ou listas.</p>"},{"location":"fundamentos/tabelas_internas/#exemplo-basico","title":"\ud83d\udd39 Exemplo b\u00e1sico","text":"<pre><code>TYPES: BEGIN OF ty_voo,\n         carrid TYPE s_carr_id,\n         connid TYPE s_conn_id,\n       END OF ty_voo.\n\nDATA lt_voos TYPE TABLE OF ty_voo.\nAPPEND VALUE #( carrid = 'LH' connid = '0400' ) TO lt_voos.\nAPPEND VALUE #( carrid = 'AA' connid = '0010' ) TO lt_voos.\n\nLOOP AT lt_voos INTO DATA(ls_voo).\n  WRITE: / ls_voo-carrid, ls_voo-connid.\nENDLOOP.\n</code></pre>"},{"location":"fundamentos/tabelas_internas/#tipos-de-tabelas","title":"\ud83d\udd39 Tipos de tabelas","text":"Tipo Descri\u00e7\u00e3o <code>STANDARD TABLE</code> Ordem indefinida (acesso sequencial) <code>SORTED TABLE</code> Ordenada por chave (acesso bin\u00e1rio) <code>HASHED TABLE</code> Indexada por hash (acesso direto r\u00e1pido) <p>\ud83d\udca1 Usa <code>READ TABLE ... WITH KEY</code> para procurar elementos espec\u00edficos:</p> <pre><code>READ TABLE lt_voos INTO DATA(ls) WITH KEY carrid = 'LH'.\nIF sy-subrc = 0.\n  WRITE: / 'Encontrado', ls-connid.\nENDIF.\n</code></pre>"},{"location":"fundamentos/tipos_customizados/","title":"Tipos Customizados","text":"<p>Podem ser definidos localmente (no programa) ou globalmente (via SE11).</p>"},{"location":"fundamentos/tipos_customizados/#definicao-local","title":"\ud83d\udd39 Defini\u00e7\u00e3o local","text":"<pre><code>TYPES: BEGIN OF ty_cliente,\n         id_cliente TYPE i,\n         nome       TYPE string,\n         cidade     TYPE string,\n       END OF ty_cliente.\n\nDATA ls_cliente TYPE ty_cliente VALUE #( id_cliente = 1 nome = 'Bruno' cidade = 'Porto' ).\nWRITE: / ls_cliente-nome.\n</code></pre> <p>\ud83d\udca1 Tipos customizados tornam o c\u00f3digo mais organizado e reutiliz\u00e1vel.</p>"},{"location":"fundamentos/tipos_de_dados/","title":"Tipos de Dados em ABAP","text":"<p>Os tipos de dados definem o formato e a natureza da informa\u00e7\u00e3o guardada numa vari\u00e1vel.</p>"},{"location":"fundamentos/tipos_de_dados/#tipos-elementares","title":"\ud83d\udd39 Tipos Elementares","text":"<pre><code>DATA: lv_i    TYPE i VALUE 42,          \" Inteiro\n      lv_p    TYPE p DECIMALS 2 VALUE '123.45',  \" Decimal (packed)\n      lv_c    TYPE c LENGTH 10 VALUE 'Texto',    \" Cadeia de caracteres fixa\n      lv_d    TYPE d VALUE sy-datum,             \" Data (YYYYMMDD)\n      lv_t    TYPE t VALUE sy-uzeit,             \" Hora (HHMMSS)\n      lv_str  TYPE string VALUE 'ABAP moderno'.  \" Cadeia din\u00e2mica\nWRITE: / lv_i, lv_p, lv_c, lv_d, lv_t, lv_str.\n</code></pre>"},{"location":"fundamentos/tipos_de_dados/#explicacao","title":"\ud83d\udd39 Explica\u00e7\u00e3o","text":"<ul> <li><code>TYPE i</code>: inteiro (4 bytes)</li> <li><code>TYPE p</code>: n\u00famero decimal (com precis\u00e3o)</li> <li><code>TYPE c</code>: string de comprimento fixo</li> <li><code>TYPE string</code>: string de comprimento vari\u00e1vel</li> <li><code>TYPE d</code> / <code>TYPE t</code>: data e hora, respetivamente</li> </ul>"},{"location":"fundamentos/tipos_de_dados/#nota","title":"\ud83d\udca1 Nota","text":"<p>Usa <code>TYPE</code> quando defines uma vari\u00e1vel (declara\u00e7\u00e3o impl\u00edcita) e <code>LIKE</code> para herdar o tipo de outro campo ou estrutura:</p> <pre><code>DATA lv_preco LIKE sflight-price.\n</code></pre>"},{"location":"fundamentos/variaveis_constantes/","title":"Vari\u00e1veis e Constantes","text":"<p>Vari\u00e1veis armazenam valores tempor\u00e1rios. Constantes mant\u00eam valores fixos durante toda a execu\u00e7\u00e3o do programa.</p>"},{"location":"fundamentos/variaveis_constantes/#declaracao-basica","title":"\ud83d\udd39 Declara\u00e7\u00e3o b\u00e1sica","text":"<pre><code>DATA lv_nome TYPE string VALUE 'Bruno'.\nDATA lv_idade TYPE i VALUE 25.\n\nWRITE: / |Nome: { lv_nome }|, / |Idade: { lv_idade }|.\n</code></pre>"},{"location":"fundamentos/variaveis_constantes/#constantes","title":"\ud83d\udd39 Constantes","text":"<pre><code>CONSTANTS:\n  lc_pi TYPE decfloat16 VALUE '3.1415926535',\n  lc_texto TYPE string VALUE 'Constante imut\u00e1vel'.\n\nWRITE: / lc_pi, lc_texto.\n</code></pre>"},{"location":"fundamentos/variaveis_constantes/#conversoes-de-tipo","title":"\ud83d\udd39 Convers\u00f5es de tipo","text":"<pre><code>DATA(lv_texto) = '123'.\nDATA(lv_numero) = lv_texto.\nWRITE: / lv_numero + 1.\n</code></pre> <p>\ud83d\udca1 Boas pr\u00e1ticas - Usa nomes descritivos (<code>lv_</code> = local variable, <code>lc_</code> = local constant) - Evita valores m\u00e1gicos: cria constantes nomeadas.</p>"},{"location":"integracoes/","title":"Integra\u00e7\u00f5es e RFCs","text":"<p>Exemplos de integra\u00e7\u00e3o com SAP e servi\u00e7os externos: BAPIs, RFCs e chamadas HTTP.</p> <p>Conte\u00fado dispon\u00edvel: - <code>bapi_flight.md</code> \u2014 exemplo usando BAPI - <code>ex01.md</code> \u2026 <code>ex10.md</code> \u2014 exerc\u00edcios e exemplos</p> <p>Pr\u00f3ximo passo: leia <code>bapi_flight.md</code> e execute o exemplo no seu sistema (se tiver acesso).</p>"},{"location":"integracoes/bapi_flight/","title":"BAPI Flight GetList","text":"<pre><code>CALL FUNCTION 'BAPI_FLIGHT_GETLIST'\n  EXPORTING airline = 'LH'\n  TABLES flight_list = DATA(lt_flights).\n</code></pre>"},{"location":"integracoes/ex01/","title":"Integracoes Exemplo 01","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"integracoes/ex02/","title":"Integracoes Exemplo 02","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"integracoes/ex03/","title":"Integracoes Exemplo 03","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"integracoes/ex04/","title":"Integracoes Exemplo 04","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"integracoes/ex05/","title":"Integracoes Exemplo 05","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"integracoes/ex06/","title":"Integracoes Exemplo 06","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"integracoes/ex07/","title":"Integracoes Exemplo 07","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"integracoes/ex08/","title":"Integracoes Exemplo 08","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"integracoes/ex09/","title":"Integracoes Exemplo 09","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"integracoes/ex10/","title":"Integracoes Exemplo 10","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"jobs/","title":"Jobs em background","text":"<p>Agendamento e execu\u00e7\u00e3o de jobs no SAP: SUBMIT, background processing e exemplos.</p> <p>Conte\u00fado: - <code>submit.md</code> \u2014 executar programas em background - <code>ex01.md</code> \u2026 <code>ex03.md</code> \u2014 exemplos pr\u00e1ticos</p> <p>Pr\u00f3ximo passo: experimente <code>submit.md</code> para ver como enviar um job.</p>"},{"location":"jobs/ex01/","title":"Jobs Exemplo 01","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"jobs/ex02/","title":"Jobs Exemplo 02","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"jobs/ex03/","title":"Jobs Exemplo 03","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"jobs/submit/","title":"SUBMIT","text":"<pre><code>SUBMIT z_report VIA JOB 'DEMO_JOB' AND RETURN.\n</code></pre>"},{"location":"objetos/","title":"Programa\u00e7\u00e3o Orientada a Objetos","text":"<p>Introdu\u00e7\u00e3o \u00e0 programa\u00e7\u00e3o orientada a objetos em ABAP: classes, m\u00e9todos, eventos e padr\u00f5es.</p> <p>Conte\u00fado: - <code>classes_basico.md</code> \u2014 conceitos e exemplos b\u00e1sicos - <code>ex01.md</code> \u2026 <code>ex10.md</code> \u2014 exerc\u00edcios e exemplos</p> <p>Pr\u00f3ximo passo: comece por <code>classes_basico.md</code>.</p>"},{"location":"objetos/classes_basico/","title":"Classe simples","text":"<pre><code>CLASS lcl_demo DEFINITION.\n  PUBLIC SECTION.\n    METHODS show.\nENDCLASS.\n\nCLASS lcl_demo IMPLEMENTATION.\n  METHOD show.\n    WRITE: / 'Ol\u00e1 OO ABAP'.\n  ENDMETHOD.\nENDCLASS.\n\nSTART-OF-SELECTION.\n  DATA(lo_obj) = NEW lcl_demo( ).\n  lo_obj-&gt;show( ).\n</code></pre>"},{"location":"objetos/ex01/","title":"Objetos Exemplo 01","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"objetos/ex02/","title":"Objetos Exemplo 02","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"objetos/ex03/","title":"Objetos Exemplo 03","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"objetos/ex04/","title":"Objetos Exemplo 04","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"objetos/ex05/","title":"Objetos Exemplo 05","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"objetos/ex06/","title":"Objetos Exemplo 06","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"objetos/ex07/","title":"Objetos Exemplo 07","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"objetos/ex08/","title":"Objetos Exemplo 08","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"objetos/ex09/","title":"Objetos Exemplo 09","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"objetos/ex10/","title":"Objetos Exemplo 10","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"performance/","title":"Performance e boas pr\u00e1ticas","text":"<p>Dicas e padr\u00f5es para escrever c\u00f3digo ABAP eficiente: otimiza\u00e7\u00e3o de consultas, uso correto de tabelas internas e <code>FOR ALL ENTRIES</code>.</p> <p>Conte\u00fado: - <code>for_all_entries.md</code> \u2014 como usar (e evitar armadilhas) - <code>ex01.md</code> \u2026 <code>ex10.md</code> \u2014 exemplos de an\u00e1lise e otimiza\u00e7\u00e3o</p> <p>Pr\u00f3ximo passo: leia <code>for_all_entries.md</code> e os exemplos de <code>ex01.md</code> para come\u00e7ar.</p>"},{"location":"performance/ex01/","title":"Performance Exemplo 01","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"performance/ex02/","title":"Performance Exemplo 02","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"performance/ex03/","title":"Performance Exemplo 03","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"performance/ex04/","title":"Performance Exemplo 04","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"performance/ex05/","title":"Performance Exemplo 05","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"performance/ex06/","title":"Performance Exemplo 06","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"performance/ex07/","title":"Performance Exemplo 07","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"performance/ex08/","title":"Performance Exemplo 08","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"performance/ex09/","title":"Performance Exemplo 09","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"performance/ex10/","title":"Performance Exemplo 10","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"performance/for_all_entries/","title":"FOR ALL ENTRIES","text":"<pre><code>SELECT carrid, connid FROM sflight INTO TABLE @DATA(lt_s).\nSELECT * FROM spfli INTO TABLE @DATA(lt_p)\n  FOR ALL ENTRIES IN @lt_s\n  WHERE carrid = @lt_s-carrid.\n</code></pre>"},{"location":"security/","title":"Seguran\u00e7a e Autoriza\u00e7\u00e3o","text":"<p>Pr\u00e1ticas e exemplos para verificar autoriza\u00e7\u00f5es e proteger programas ABAP.</p> <p>Conte\u00fado: - <code>authority_check.md</code> \u2014 uso de authority-check e verifica\u00e7\u00f5es - <code>ex01.md</code> \u2026 <code>ex05.md</code> \u2014 exemplos pr\u00e1ticos</p> <p>Pr\u00f3ximo passo: leia <code>authority_check.md</code> para aprender a proteger transa\u00e7\u00f5es e fun\u00e7\u00f5es.</p>"},{"location":"security/authority_check/","title":"Verifica\u00e7\u00e3o de Autoriza\u00e7\u00e3o","text":"<pre><code>AUTHORITY-CHECK OBJECT 'S_TCODE' ID 'TCD' FIELD 'SE38'.\nIF sy-subrc &lt;&gt; 0.\n  WRITE: / 'Sem permiss\u00e3o.'.\nENDIF.\n</code></pre>"},{"location":"security/ex01/","title":"Security Exemplo 01","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"security/ex02/","title":"Security Exemplo 02","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"security/ex03/","title":"Security Exemplo 03","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"security/ex04/","title":"Security Exemplo 04","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"security/ex05/","title":"Security Exemplo 05","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/","title":"SQL ABAP","text":"<p>Consultas b\u00e1sicas, JOINS e manipula\u00e7\u00e3o de dados.</p> <p>Conte\u00fado e ordem sugerida: - <code>select_basico.md</code> \u2014 SELECT b\u00e1sico - <code>joins.md</code> \u2014 JOINS em ABAP - <code>agregacoes.md</code> \u2014 fun\u00e7\u00f5es de agrega\u00e7\u00e3o e GROUP BY - <code>ex01.md</code> \u2026 <code>ex25.md</code> \u2014 exerc\u00edcios pr\u00e1ticos</p> <p>Pr\u00f3ximo passo: comece por <code>select_basico.md</code> e depois avance para <code>joins.md</code>.</p>"},{"location":"sql/agregacoes/","title":"Agrega\u00e7\u00f5es","text":"<pre><code>SELECT carrid, COUNT( * ) AS total_voos, AVG( price ) AS preco_medio\n  FROM sflight\n  GROUP BY carrid\n  INTO TABLE @DATA(lt_stats).\n</code></pre>"},{"location":"sql/ex01/","title":"Sql Exemplo 01","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex02/","title":"Sql Exemplo 02","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex03/","title":"Sql Exemplo 03","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex04/","title":"Sql Exemplo 04","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex05/","title":"Sql Exemplo 05","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex06/","title":"Sql Exemplo 06","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex07/","title":"Sql Exemplo 07","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex08/","title":"Sql Exemplo 08","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex09/","title":"Sql Exemplo 09","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex10/","title":"Sql Exemplo 10","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex11/","title":"Sql Exemplo 11","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex12/","title":"Sql Exemplo 12","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex13/","title":"Sql Exemplo 13","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex14/","title":"Sql Exemplo 14","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex15/","title":"Sql Exemplo 15","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex16/","title":"Sql Exemplo 16","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex17/","title":"Sql Exemplo 17","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex18/","title":"Sql Exemplo 18","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex19/","title":"Sql Exemplo 19","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex20/","title":"Sql Exemplo 20","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex21/","title":"Sql Exemplo 21","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex22/","title":"Sql Exemplo 22","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex23/","title":"Sql Exemplo 23","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex24/","title":"Sql Exemplo 24","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/ex25/","title":"Sql Exemplo 25","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"sql/joins/","title":"Joins","text":"<pre><code>SELECT a~carrid, a~connid, b~carrname\n  FROM spfli AS a\n  INNER JOIN scarr AS b ON a~carrid = b~carrid\n  INTO TABLE @DATA(lt_join).\n</code></pre>"},{"location":"sql/select_basico/","title":"SELECT b\u00e1sico","text":"<pre><code>SELECT * FROM scarr INTO TABLE @DATA(lt_scarr).\nLOOP AT lt_scarr INTO DATA(ls_scarr).\n  WRITE: / ls_scarr-carrid, ls_scarr-carrname.\nENDLOOP.\n</code></pre>"},{"location":"testes/","title":"Testes ABAP Unit","text":"<p>Introdu\u00e7\u00e3o a testes unit\u00e1rios em ABAP (ABAP Unit) e exemplos de como estruturar testes.</p> <p>Conte\u00fado: - <code>unit_test.md</code> \u2014 guia de ABAP Unit - <code>ex01.md</code> \u2026 <code>ex03.md</code> \u2014 exemplos de testes</p> <p>Pr\u00f3ximo passo: leia <code>unit_test.md</code> e crie um teste simples para um m\u00f3dulo de fun\u00e7\u00e3o.</p>"},{"location":"testes/ex01/","title":"Testes Exemplo 01","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"testes/ex02/","title":"Testes Exemplo 02","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"testes/ex03/","title":"Testes Exemplo 03","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"testes/unit_test/","title":"ABAP Unit","text":"<pre><code>CLASS ltc_demo DEFINITION FOR TESTING.\n  PRIVATE SECTION.\n    METHODS test_sum FOR TESTING.\nENDCLASS.\n\nCLASS ltc_demo IMPLEMENTATION.\n  METHOD test_sum.\n    cl_abap_unit_assert=&gt;assert_equals( act = 2 + 2 exp = 4 ).\n  ENDMETHOD.\nENDCLASS.\n</code></pre>"},{"location":"utilitarios/","title":"Utilit\u00e1rios e fun\u00e7\u00f5es comuns","text":"<p>Snippets, utilit\u00e1rios e fun\u00e7\u00f5es auxiliares \u00fateis em desenvolvimento ABAP (datas, JSON, etc.).</p> <p>Conte\u00fado: - <code>datas.md</code> \u2014 manipula\u00e7\u00e3o de datas - <code>json.md</code> \u2014 trabalhar com JSON em ABAP - <code>ex01.md</code> \u2026 <code>ex10.md</code> \u2014 exemplos pr\u00e1ticos</p> <p>Pr\u00f3ximo passo: experimente <code>datas.md</code> e <code>json.md</code>.</p>"},{"location":"utilitarios/datas/","title":"Datas e Horas","text":"<pre><code>DATA lv_hoje TYPE d VALUE sy-datum.\nDATA(lv_amanha) = lv_hoje + 1.\nWRITE: / lv_hoje, lv_amanha.\n</code></pre>"},{"location":"utilitarios/ex01/","title":"Utilitarios Exemplo 01","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"utilitarios/ex02/","title":"Utilitarios Exemplo 02","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"utilitarios/ex03/","title":"Utilitarios Exemplo 03","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"utilitarios/ex04/","title":"Utilitarios Exemplo 04","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"utilitarios/ex05/","title":"Utilitarios Exemplo 05","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"utilitarios/ex06/","title":"Utilitarios Exemplo 06","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"utilitarios/ex07/","title":"Utilitarios Exemplo 07","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"utilitarios/ex08/","title":"Utilitarios Exemplo 08","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"utilitarios/ex09/","title":"Utilitarios Exemplo 09","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"utilitarios/ex10/","title":"Utilitarios Exemplo 10","text":"<pre><code>DATA(lv) = sy-datum.\nWRITE: / 'Exemplo ABAP ativo:', lv.\n</code></pre>"},{"location":"utilitarios/json/","title":"Convers\u00e3o JSON","text":"<pre><code>DATA(lv_json) = /ui2/cl_json=&gt;serialize( data = lt_data ).\nWRITE lv_json.\n</code></pre>"}]}